syntax = "proto3";
package proto;
option go_package = "./proto";

message Empty {}

message ExecuteOnLeaderMsg {
  bytes payload = 1;
}

message IsLeaderResponse {
  bool isLeader = 1;
}

message ConsensusRequest {
  string nodeID = 1;
  string nodeConsensusAddr = 2;
}

message RegisterServerReq {
  string serviceName = 1;
  string host = 2;
  string protocol = 3;
  string healthCheckEndpoint = 4;
  string cleanFuncName = 5;
}

message RegisterServerRes {
  string id = 1;
}

message GetServersReq {
  string id = 1;
}

message GetServersRes {
  repeated RegisterServerModel servers = 1;
}

message RegisterServerModel {
  string id = 1;
  string host = 2;
  string cleanFuncName = 3;
  string lastContact = 4;
  bool alive = 5;
}

service Service {
  rpc ExecuteOnLeader(ExecuteOnLeaderMsg) returns (ExecuteOnLeaderMsg);
  rpc ReinstallNode(Empty) returns (Empty);
  rpc IsLeader(Empty) returns (IsLeaderResponse);
  rpc ConsensusJoin(ConsensusRequest) returns (Empty);
  rpc ConsensusRemove(ConsensusRequest) returns (Empty);

  rpc RegisterServer(RegisterServerReq) returns (RegisterServerRes);
  rpc GetServers(GetServersReq) returns (GetServersRes);
}
